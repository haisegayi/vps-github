name: RDP Mobile Optimized - Auto Restart

on:
  workflow_dispatch:
  schedule:
    # Tự động chạy lại mỗi 5.5 giờ để tránh bị tắt
    - cron: '0 */5 * * *'

env:
  MAX_RUNTIME: 330  # 5.5 giờ
  RESTART_COUNT: 0

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 330  # 5.5 giờ để dự phòng

    steps:
      - name: Parallel Setup - Phase 1
        run: |
          # Chạy song song các tác vụ không phụ thuộc
          Start-Job -ScriptBlock {
            # Tối ưu hệ thống cho RDP
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          }

          Start-Job -ScriptBlock {
            # Tối ưu hiệu suất RDP
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxMonitors" -Value 4 -Force
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxXResolution" -Value 1920 -Force
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxYResolution" -Value 1080 -Force
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxColorDepth" -Value 16 -Force
          }

          Start-Job -ScriptBlock {
            # Tối ưu network
            Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' -Name "Tcp1323Opts" -Value 1 -Force
            Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' -Name "TCPWindowSize" -Value 64240 -Force
          }

          # Đợi tất cả job hoàn thành
          Get-Job | Wait-Job | Receive-Job

          # Firewall config
          netsh advfirewall firewall delete rule name="RDP" 2>$null
          netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389
          
          Restart-Service -Name TermService -Force

      - name: Parallel Setup - Phase 2
        run: |
          # Tạo user và cài đặt Tailscale song song
          $userJob = Start-Job -ScriptBlock {
            $password = "Mobile@" + (Get-Random -Minimum 1000 -Maximum 9999)
            $securePass = ConvertTo-SecureString $password -AsPlainText -Force
            
            New-LocalUser -Name "MobileUser" -Password $securePass -AccountNeverExpires
            Add-LocalGroupMember -Group "Administrators" -Member "MobileUser"
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member "MobileUser"
            
            return $password
          }

          $tailscaleJob = Start-Job -ScriptBlock {
            $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
            $installerPath = "$env:TEMP\tailscale.msi"
            Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
            Start-Process msiexec.exe -ArgumentList "/i", "$installerPath", "/quiet", "/norestart" -Wait
            Remove-Item $installerPath -Force
            return $true
          }

          # Lấy kết quả từ các job
          $password = $userJob | Wait-Job | Receive-Job
          $tailscaleJob | Wait-Job | Receive-Job

          "RDP_USER=MobileUser" | Out-File -FilePath $env:GITHUB_ENV -Append
          "RDP_PASSWORD=$password" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Fast Tailscale Configuration
        run: |
          # Khởi động Tailscale nhanh
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --login-server=https://login.tailscale.com --accept-routes --accept-dns=false --hostname=fast-rdp-$env:GITHUB_RUN_ID --timeout=30s
          
          # Lấy IP nhanh với timeout ngắn
          $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
          if (-not $tsIP) {
            # Thử lại nhanh
            Start-Sleep -Seconds 3
            $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
          }
          
          if ($tsIP) {
            "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Append
            Write-Host "✅ Tailscale IP: $tsIP"
          } else {
            Write-Host "⚠️ Không lấy được Tailscale IP, sử dụng fallback"
            "TAILSCALE_IP=waiting..." | Out-File -FilePath $env:GITHUB_ENV -Append
          }

      - name: Quick Performance Tweaks
        run: |
          # Tối ưu nhanh - chỉ những thứ quan trọng
          Get-Service -Name "SysMain" | Stop-Service -Force -ErrorAction SilentlyContinue
          Set-Service -Name "SysMain" -StartupType Disabled -ErrorAction SilentlyContinue
          
          # Power plan high performance
          powercfg /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
          
          # Disable unnecessary services
          $servicesToDisable = @("WSearch", "TabletInputService", "lmhosts", "ALG")
          foreach ($service in $servicesToDisable) {
            Get-Service -Name $service -ErrorAction SilentlyContinue | Stop-Service -Force -ErrorAction SilentlyContinue
            Set-Service -Name $service -StartupType Manual -ErrorAction SilentlyContinue
          }

      - name: Auto-Restart System
        run: |
          # Tạo script tự động restart workflow
          $restartScript = @"
          `$ErrorActionPreference = 'Continue'
          
          function Start-NextSession {
              `$runTime = `$env:MAX_RUNTIME
              `$restartCount = [int]`$env:RESTART_COUNT
              `$maxRestarts = 10  # Tối đa 10 lần restart
              
              Write-Host "🔄 Auto-restart system active..."
              Write-Host "⏰ Runtime limit: `$runTime minutes"
              Write-Host "🔢 Restart count: `$restartCount/`$maxRestarts"
              
              # Đếm ngược và chuẩn bị restart
              `$shutdownTime = `$runTime - 10  # Dừng trước 10 phút
              Start-Sleep -Seconds (`$shutdownTime * 60)
              
              if (`$restartCount -lt `$maxRestarts) {
                  Write-Host "🚀 Preparing auto-restart..."
                  
                  # Trigger workflow mới
                  `$token = "`$env:GITHUB_TOKEN"
                  `$headers = @{
                      "Authorization" = "token `$token"
                      "Accept" = "application/vnd.github.v3+json"
                  }
                  
                  `$body = @{
                      ref = "main"
                      inputs = @{
                          restart_count = (`$restartCount + 1)
                      }
                  } | ConvertTo-Json
                  
                  try {
                      `$response = Invoke-RestMethod -Uri "https://api.github.com/repos/`$env:GITHUB_REPOSITORY/actions/workflows/`$env:GITHUB_WORKFLOW/dispatches" -Method Post -Headers `$headers -Body `$body
                      Write-Host "✅ Successfully triggered restart #`$(`$restartCount + 1)"
                  } catch {
                      Write-Host "⚠️ Auto-restart failed: `$_"
                      Write-Host "Manual restart required after shutdown"
                  }
              } else {
                  Write-Host "⏹️ Maximum restart limit reached (`$maxRestarts)"
              }
          }
          
          # Chạy auto-restart trong background
          Start-Job -ScriptBlock `${function:Start-NextSession}
"@
          Set-Content -Path "$env:TEMP\auto_restart.ps1" -Value $restartScript
          
          # Chạy auto-restart
          Start-Process PowerShell.exe -ArgumentList "-File", "$env:TEMP\auto_restart.ps1" -WindowStyle Hidden

      - name: Fast Connection Display
        run: |
          # Hiển thị thông tin nhanh
          Write-Host "=========================================="
          Write-Host "🚀 ULTRA FAST RDP - AUTO RESTART"
          Write-Host "=========================================="
          Write-Host "IP: $env:TAILSCALE_IP"
          Write-Host "User: $env:RDP_USER" 
          Write-Host "Pass: $env:RDP_PASSWORD"
          Write-Host "Session: $env:GITHUB_RUN_ID"
          Write-Host "Restart Count: $env:RESTART_COUNT"
          Write-Host ""
          Write-Host "⚡ OPTIMIZED FOR SPEED:"
          Write-Host "• Parallel setup"
          Write-Host "• Minimal services"
          Write-Host "• Fast Tailscale connect"
          Write-Host "• Auto-restart every 5.5 hours"
          Write-Host "=========================================="

      - name: Smart Monitoring with Auto-Restart
        run: |
          $startTime = Get-Date
          $counter = 0
          $lastIPCheck = Get-Date
          $currentIP = $env:TAILSCALE_IP
          
          while ($true) {
            $counter++
            $elapsed = (Get-Date) - $startTime
            $minutesElapsed = [math]::Round($elapsed.TotalMinutes)
            
            # Kiểm tra IP mỗi 10 phút
            if ((Get-Date) - $lastIPCheck -gt (New-TimeSpan -Minutes 10)) {
                $newIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
                if ($newIP -and $newIP -ne $currentIP) {
                    $currentIP = $newIP
                    Write-Host "🔄 IP Updated: $currentIP"
                }
                $lastIPCheck = Get-Date
            }
            
            # Kiểm tra performance mỗi 5 phút
            if ($counter % 5 -eq 0) {
                $pingResult = Test-Connection -ComputerName $currentIP -Count 2 -Quiet -ErrorAction SilentlyContinue
                $cpuUsage = (Get-Counter "\Processor(_Total)\% Processor Time" -SampleInterval 1 -MaxSamples 3 | 
                           Select-Object -ExpandProperty CounterSamples | 
                           Select-Object -ExpandProperty CookedValue | 
                           Measure-Object -Average).Average
                
                Write-Host "[$(Get-Date -Format 'HH:mm:ss')] Stats - CPU: $([math]::Round($cpuUsage))% | Ping: $pingResult | Time: ${minutesElapsed}m"
            } else {
                # Log đơn giản mỗi phút
                if ($counter % 15 -eq 1) {  # Mỗi 15 phút hiển thị đầy đủ
                    Write-Host "[$(Get-Date -Format 'HH:mm:ss')] Active - $minutesElapsed minutes - IP: $currentIP"
                }
            }
            
            # Tự động cập nhật IP nếu bị mất
            if (-not $currentIP -or $currentIP -eq "waiting...") {
                $retryIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
                if ($retryIP) {
                    $currentIP = $retryIP
                    Write-Host "✅ Recovered IP: $currentIP"
                }
            }
            
            # Kiểm tra thời gian hoạt động
            if ($minutesElapsed -ge 320) {  # Cảnh báo trước 10 phút
                Write-Host "⚠️ SESSION WILL RESTART SOON - Auto-restart in $($env:MAX_RUNTIME - $minutesElapsed) minutes"
            }
            
            Start-Sleep -Seconds 60
          }

      - name: Emergency Cleanup (luôn chạy)
        if: always()
        run: |
          Write-Host "🧹 Emergency cleanup..."
          # Dừng các tiến trình background
          Get-Job | Remove-Job -Force -ErrorAction SilentlyContinue
          
          # Log kết thúc
          Write-Host "Session $env:GITHUB_RUN_ID ended at $(Get-Date)"
          Write-Host "Restart count: $env:RESTART_COUNT"
