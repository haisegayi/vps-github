name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          Write-Host "Configuring RDP for mobile compatibility..."
          
          # Enable Remote Desktop
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          
          # Mobile-compatible authentication settings
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 1 -Force
          
          # Configure firewall
          netsh advfirewall firewall delete rule name="RDP" 2>$null
          netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389
          
          # Restart services
          Restart-Service -Name TermService -Force
          Start-Sleep -Seconds 3
          
          Write-Host "RDP configuration completed"

      - name: Create RDP User with Secure Password
        run: |
          Write-Host "Creating RDP user..."
          
          # Simple password without special characters for mobile compatibility
          $charSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
          $password = -join ((1..10) | ForEach-Object { $charSet[(Get-Random -Maximum $charSet.Length)] })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          
          # Create user
          New-LocalUser -Name "MobileUser" -Password $securePass -AccountNeverExpires -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Administrators" -Member "MobileUser" -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "MobileUser" -ErrorAction SilentlyContinue
          
          # Set environment variables
          "RDP_USER=MobileUser" | Out-File -FilePath $env:GITHUB_ENV -Append
          "RDP_PASSWORD=$password" | Out-File -FilePath $env:GITHUB_ENV -Append
          
          Write-Host "User created: MobileUser"

      - name: Install Tailscale
        run: |
          Write-Host "Installing Tailscale..."
          
          # Download and install Tailscale
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -TimeoutSec 30
          Start-Process msiexec.exe -ArgumentList "/i", "$installerPath", "/quiet", "/norestart" -Wait -NoNewWindow
          Remove-Item $installerPath -Force -ErrorAction SilentlyContinue
          
          # Wait for installation to complete
          Start-Sleep -Seconds 15
          Write-Host "Tailscale installed"

      - name: Setup Tailscale Connection
        run: |
          Write-Host "Setting up Tailscale connection..."
          
          # Wait for Tailscale service to be ready
          $serviceReady = $false
          for ($i = 0; $i -lt 10; $i++) {
            if (Test-Path "$env:ProgramFiles\Tailscale\tailscale.exe") {
              $serviceReady = $true
              break
            }
            Start-Sleep -Seconds 5
          }
          
          if (-not $serviceReady) {
              Write-Host "Tailscale not ready, but continuing..."
          }
          
          # Start Tailscale without auth key first to generate login URL
          Write-Host "Starting Tailscale for authentication..."
          $process = Start-Process -FilePath "$env:ProgramFiles\Tailscale\tailscale.exe" -ArgumentList "up" -PassThru -NoNewWindow
          Start-Sleep -Seconds 10
          
          # Get status to see if we need authentication
          $status = & "$env:ProgramFiles\Tailscale\tailscale.exe" status 2>$null
          Write-Host "Tailscale status: $status"

      - name: Get Connection Information
        run: |
          Write-Host "Getting connection information..."
          
          # Try to get Tailscale IP
          $tsIP = $null
          for ($i = 0; $i -lt 20; $i++) {
            $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
            if ($tsIP -and $tsIP -match '^100\.') {
              break
            }
            Start-Sleep -Seconds 3
          }
          
          if ($tsIP) {
            "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Append
            Write-Host "Tailscale IP obtained: $tsIP"
          } else {
            Write-Host "No Tailscale IP yet - manual authentication required"
            Write-Host "Please visit: https://login.tailscale.com/admin/machines"
            Write-Host "Look for device and authorize it"
          }
          
          # Get machine info for manual connection
          $machineInfo = & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json 2>$null | ConvertFrom-Json -ErrorAction SilentlyContinue
          if ($machineInfo) {
            Write-Host "Machine name: $($machineInfo.Self.DNSName)"
          }

      - name: Display Mobile Connection Guide
        run: |
          Write-Host ""
          Write-Host "=" * 50
          Write-Host "MOBILE RDP CONNECTION GUIDE"
          Write-Host "=" * 50
          Write-Host ""
          Write-Host "STEP 1: AUTHENTICATE TAILSCALE"
          Write-Host "1. Go to: https://login.tailscale.com/admin/machines"
          Write-Host "2. Find your device (github-rdp-* or similar)"
          Write-Host "3. Click 'Authorize' if needed"
          Write-Host "4. Wait 1-2 minutes for IP assignment"
          Write-Host ""
          Write-Host "STEP 2: CONNECT FROM MOBILE"
          Write-Host "IP Address: $env:TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USER"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host ""
          Write-Host "STEP 3: MOBILE APP SETTINGS"
          Write-Host "- Use Microsoft Remote Desktop app"
          Write-Host "- Turn OFF 'Use RDP Security Layer'"
          Write-Host "- Set resolution to 1280x720"
          Write-Host "=" * 50
          Write-Host ""

      - name: Wait and Maintain Connection
        run: |
          Write-Host "Waiting for connections..."
          Write-Host "This session will remain active for 1 hour"
          Write-Host "Check the logs above for connection information"
          
          $startTime = Get-Date
          $timeoutMinutes = 60
          
          while ($true) {
            $currentTime = Get-Date
            $elapsed = ($currentTime - $startTime).TotalMinutes
            $remaining = $timeoutMinutes - $elapsed
            
            if ($remaining -le 0) {
                Write-Host "Session timeout reached. Stopping..."
                break
            }
            
            # Get current Tailscale status
            $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
            $status = if ($tsIP) { "CONNECTED - IP: $tsIP" } else { "AUTH REQUIRED - Check https://login.tailscale.com" }
            
            Write-Host "[$(Get-Date -Format 'HH:mm:ss')] Status: $status - Time remaining: $([math]::Round($remaining)) minutes"
            
            # Update environment variable if IP changes
            if ($tsIP -and $tsIP -ne $env:TAILSCALE_IP) {
                "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Append
            }
            
            Start-Sleep -Seconds 30
          }
