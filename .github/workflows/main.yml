name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication
          try {
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
            Write-Host "✓ Enabled Remote Desktop"
            
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force
            Write-Host "✓ Configured RDP authentication settings"
            
            # Configure firewall
            netsh advfirewall firewall delete rule name="RDP-Tailscale" 2>$null
            netsh advfirewall firewall add rule name="RDP-Tailscale" `
              dir=in action=allow protocol=TCP localport=3389
            Write-Host "✓ Configured firewall rule"
            
            # Restart Terminal Service
            Restart-Service -Name TermService -Force
            Write-Host "✓ Restarted Terminal Service"
          }
          catch {
            Write-Error "Failed to configure RDP: $_"
            exit 1
          }

      - name: Create RDP User with Secure Password
        run: |
          try {
            Add-Type -AssemblyName System.Web
            $password = [System.Web.Security.Membership]::GeneratePassword(16, 4)
            $securePass = ConvertTo-SecureString $password -AsPlainText -Force
            
            New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
            Add-LocalGroupMember -Group "Administrators" -Member "RDP"
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
            
            Write-Host "✓ Created RDP user"
            
            # Set environment variables - FIXED SYNTAX
            "RDP_CREDS=User: RDP | Password: $password" | Out-File -FilePath $env:GITHUB_ENV -Append
            "RDP_PASSWORD=$password" | Out-File -FilePath $env:GITHUB_ENV -Append
            
            # Verify user creation
            if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
              throw "User creation failed"
            }
          }
          catch {
            Write-Error "Failed to create user: $_"
            exit 1
          }

      - name: Install Tailscale
        run: |
          try {
            $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
            $installerPath = "$env:TEMP\tailscale.msi"
            
            Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
            Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
            Remove-Item $installerPath -Force
            
            Write-Host "✓ Installed Tailscale"
            
            # Wait for Tailscale service to start
            Start-Sleep -Seconds 10
          }
          catch {
            Write-Error "Failed to install Tailscale: $_"
            exit 1
          }

      - name: Establish Tailscale Connection
        run: |
          try {
            # Check if Tailscale executable exists
            if (-not (Test-Path "$env:ProgramFiles\Tailscale\tailscale.exe")) {
              throw "Tailscale not installed properly"
            }
            
            # Bring up Tailscale
            & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID --accept-routes=true
            
            # Wait for Tailscale to assign an IP
            $tsIP = $null
            $retries = 0
            while (-not $tsIP -and $retries -lt 15) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
              if (-not $tsIP) {
                Start-Sleep -Seconds 3
                $retries++
              }
            }
            
            if (-not $tsIP) {
              throw "Tailscale IP not assigned after $retries retries"
            }
            
            Write-Host "✓ Tailscale IP: $tsIP"
            "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Append
          }
          catch {
            Write-Error "Failed to establish Tailscale connection: $_"
            exit 1
          }

      - name: Verify RDP Accessibility
        run: |
          try {
            Write-Host "Testing RDP connectivity to: $env:TAILSCALE_IP"
            
            # Test local RDP port first
            $localTest = Test-NetConnection -ComputerName localhost -Port 3389 -WarningAction SilentlyContinue
            if (-not $localTest.TcpTestSucceeded) {
              Write-Warning "Local RDP port test failed, but continuing..."
            }
            
            # Additional verification - check RDP service status
            $serviceStatus = Get-Service -Name TermService -ErrorAction SilentlyContinue
            if ($serviceStatus.Status -ne 'Running') {
              Write-Warning "TermService is not running. Attempting to start..."
              Start-Service -Name TermService -Force
            }
            
            Write-Host "✓ RDP setup completed"
            Write-Host "✓ Tailscale IP: $env:TAILSCALE_IP"
          }
          catch {
            Write-Warning "RDP verification had issues: $_"
            # Don't exit here as RDP might still work
          }

      - name: Maintain Connection
        run: |
          Write-Host "`n" + "="*50
          Write-Host "RDP ACCESS INFORMATION"
          Write-Host "="*50
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP" 
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host "="*50
          Write-Host "`nKeep this workflow running to maintain RDP access"
          Write-Host "Press Ctrl+C in GitHub UI to stop the session`n"
          
          # Display connection status periodically
          $counter = 0
          while ($true) {
            $counter++
            $currentTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            Write-Host "[$currentTime] RDP Session active - $counter minutes elapsed"
            
            # Check Tailscale status every 10 minutes
            if ($counter % 2 -eq 0) {
              try {
                $tsStatus = & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json 2>$null | ConvertFrom-Json
                $currentIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
                Write-Host "   Tailscale Status: Connected - $currentIP"
              }
              catch {
                Write-Host "   Tailscale Status: Checking..."
              }
            }
            
            Start-Sleep -Seconds 60
          }
