name: RDP Mobile Optimized with Backup

on:
  workflow_dispatch:
    inputs:
      restore_backup:
        description: 'Restore from previous backup'
        required: false
        default: 'false'
        type: boolean

env:
  BACKUP_DIR: 'C:\RDP_Backup'
  DATA_DIR: 'C:\RDP_Data'

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Setup Directories
        run: |
          # T·∫°o th∆∞ m·ª•c backup v√† data
          New-Item -ItemType Directory -Path $env:BACKUP_DIR -Force
          New-Item -ItemType Directory -Path $env:DATA_DIR -Force
          
          # ƒê√°nh d·∫•u th∆∞ m·ª•c ƒë·ªÉ kh√¥ng b·ªã x√≥a
          Set-Content -Path "$env:BACKUP_DIR\backup_marker.txt" -Value "RDP Backup Directory - DO NOT DELETE"
          Set-Content -Path "$env:DATA_DIR\data_marker.txt" -Value "RDP Data Directory - DO NOT DELETE"

      - name: Restore Backup if Requested
        if: inputs.restore_backup == true
        run: |
          Write-Host "üîÅ Restoring from backup..."
          if (Test-Path "$env:BACKUP_DIR\data_backup.zip") {
            Expand-Archive -Path "$env:BACKUP_DIR\data_backup.zip" -DestinationPath $env:DATA_DIR -Force
            Write-Host "‚úÖ Backup restored successfully"
            
            # Kh√¥i ph·ª•c registry settings n·∫øu c√≥
            if (Test-Path "$env:BACKUP_DIR\registry_backup.reg") {
              reg import "$env:BACKUP_DIR\registry_backup.reg" 2>$null
              Write-Host "‚úÖ Registry settings restored"
            }
          } else {
            Write-Host "‚ö†Ô∏è No backup found, starting fresh"
          }

      - name: Create Auto-Backup Script
        run: |
          $backupScript = @"
          `$ErrorActionPreference = 'Continue'
          
          function Backup-Data {
              param([string]`$Reason)
              
              `$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
              `$backupFile = "`$env:BACKUP_DIR\data_backup_`${timestamp}_`$Reason.zip"
              
              try {
                  # Sao l∆∞u th∆∞ m·ª•c data
                  Compress-Archive -Path "`$env:DATA_DIR\*" -DestinationPath "`$backupFile" -Force
                  
                  # Sao l∆∞u registry settings quan tr·ªçng
                  reg export "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server" "`$env:BACKUP_DIR\registry_backup.reg" /y 2>`$null
                  
                  # Gi·ªØ ch·ªâ 3 b·∫£n backup g·∫ßn nh·∫•t
                  `$oldBackups = Get-ChildItem "`$env:BACKUP_DIR\data_backup_*.zip" | Sort-Object LastWriteTime -Descending | Select-Object -Skip 3
                  foreach (`$oldBackup in `$oldBackups) {
                      Remove-Item `$oldBackup.FullName -Force -ErrorAction SilentlyContinue
                  }
                  
                  # C·∫≠p nh·∫≠t backup m·ªõi nh·∫•t
                  Copy-Item "`$backupFile" "`$env:BACKUP_DIR\data_backup.zip" -Force
                  
                  Write-Host "[BACKUP] Backup completed: `$backupFile"
                  return `$true
              } catch {
                  Write-Host "[BACKUP] Backup failed: `$_"
                  return `$false
              }
          }
          
          # Backup khi b·∫Øt ƒë·∫ßu
          Backup-Data -Reason "startup"
          
          # Backup ƒë·ªãnh k·ª≥ m·ªói 30 ph√∫t
          `$periodicCounter = 0
          while (`$true) {
              Start-Sleep -Seconds 1800  # 30 ph√∫t
              `$periodicCounter++
              Backup-Data -Reason "periodic_`$periodicCounter"
          }
"@
          Set-Content -Path "$env:BACKUP_DIR\auto_backup.ps1" -Value $backupScript

      - name: Start Backup Service
        run: |
          # T·∫°o scheduled task cho backup
          $taskAction = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-File `"$env:BACKUP_DIR\auto_backup.ps1`""
          $taskTrigger = New-ScheduledTaskTrigger -AtStartup
          $taskSettings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RestartCount 3 -RestartInterval (New-TimeSpan -Minutes 1)
          
          Register-ScheduledTask -TaskName "RDP_Auto_Backup" -Action $taskAction -Trigger $taskTrigger -Settings $taskSettings -Description "Auto backup for RDP session" -Force
          
          # Kh·ªüi ch·∫°y backup service
          Start-ScheduledTask -TaskName "RDP_Auto_Backup"
          Write-Host "‚úÖ Auto-backup service started"

      - name: Optimize Windows for RDP
        run: |
          # Backup registry tr∆∞·ªõc khi thay ƒë·ªïi
          reg export "HKLM\System\CurrentControlSet\Control\Terminal Server" "$env:BACKUP_DIR\registry_original.reg" /y 2>$null
          
          # T·ªëi ∆∞u h·ªá th·ªëng cho RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          
          # T·ªëi ∆∞u hi·ªáu su·∫•t RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxMonitors" -Value 4 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxXResolution" -Value 1920 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxYResolution" -Value 1080 -Force
          
          # Gi·∫£m ch·∫•t l∆∞·ª£ng h√¨nh ·∫£nh ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxColorDepth" -Value 16 -Force
          
          # T·ªëi ∆∞u network
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' -Name "Tcp1323Opts" -Value 1 -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' -Name "TCPWindowSize" -Value 64240 -Force
          
          # S·ª≠a l·ªói firewall
          netsh advfirewall firewall delete rule name="RDP" 2>$null
          netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389
          
          Restart-Service -Name TermService -Force

      - name: Create Optimized User with Profile Backup
        run: |
          $password = "Mobile@" + (Get-Random -Minimum 1000 -Maximum 9999)
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          
          # Ki·ªÉm tra n·∫øu user ƒë√£ t·ªìn t·∫°i
          $userExists = Get-LocalUser -Name "MobileUser" -ErrorAction SilentlyContinue
          if (-not $userExists) {
              New-LocalUser -Name "MobileUser" -Password $securePass -AccountNeverExpires
              Add-LocalGroupMember -Group "Administrators" -Member "MobileUser"
              Add-LocalGroupMember -Group "Remote Desktop Users" -Member "MobileUser"
          }
          
          # T·∫°o profile directory trong data folder
          $userProfileDir = "$env:DATA_DIR\UserProfile"
          New-Item -ItemType Directory -Path $userProfileDir -Force
          
          # T·∫°o shortcuts v√† customizations
          $desktopDir = "$userProfileDir\Desktop"
          New-Item -ItemType Directory -Path $desktopDir -Force
          
          # T·∫°o file h∆∞·ªõng d·∫´n
          $guideContent = @"
# RDP Mobile Session - Data Backup Guide

üìÅ YOUR DATA IS SAFE IN:
$env:DATA_DIR

üîÑ AUTO-BACKUP:
- Backups every 30 minutes
- Stored in: $env:BACKUP_DIR
- Keeps last 3 backups

üíæ MANUAL BACKUP:
Run this in PowerShell:
Backup-Data -Reason "manual"

üîß IMPORTANT:
- Save your work in $env:DATA_DIR
- Install software to C:\Apps\
- Configuration files go to $env:DATA_DIR\Config\
"@
          Set-Content -Path "$desktopDir\README_Backup_Info.txt" -Value $guideContent
          
          "RDP_USER=MobileUser" | Out-File -FilePath $env:GITHUB_ENV -Append
          "RDP_PASSWORD=$password" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install Tailscale with Optimizations
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "$installerPath", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force
          Start-Sleep -Seconds 5

      - name: Configure Tailscale for Low Latency
        run: |
          # Backup Tailscale config
          $tailscaleConfig = "$env:DATA_DIR\Tailscale"
          New-Item -ItemType Directory -Path $tailscaleConfig -Force
          
          # C·∫•u h√¨nh Tailscale
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --login-server=https://login.tailscale.com --accept-routes --hostname=fast-rdp-$env:GITHUB_RUN_ID
          
          # ƒê·ª£i k·∫øt n·ªëi
          $tsIP = $null
          for ($i = 0; $i < 20; $i++) {
            $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
            if ($tsIP) { 
              "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Append
              
              # L∆∞u IP v√†o data directory
              Set-Content -Path "$env:DATA_DIR\connection_info.txt" -Value "IP: $tsIP`nUser: $env:RDP_USER`nPass: $env:RDP_PASSWORD`nTime: $(Get-Date)"
              break 
            }
            Start-Sleep -Seconds 2
          }

      - name: Apply Performance Tweaks
        run: |
          # L∆∞u c√†i ƒë·∫∑t performance v√†o data directory
          $perfSettings = @{
            VisualEffects = 2
            PowerPlan = "High performance"
            ServicesDisabled = @("SysMain")
            OptimizedAt = Get-Date
          } | ConvertTo-Json
          
          Set-Content -Path "$env:DATA_DIR\performance_settings.json" -Value $perfSettings
          
          # √Åp d·ª•ng t·ªëi ∆∞u
          Get-Service -Name "SysMain" | Stop-Service -Force -ErrorAction SilentlyContinue
          Set-Service -Name "SysMain" -StartupType Disabled -ErrorAction SilentlyContinue
          
          Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name "VisualFXSetting" -Value 2 -Force
          powercfg /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c

      - name: Create Emergency Backup on Shutdown
        run: |
          $shutdownScript = @"
          # Emergency backup khi shutdown
          `$shutdownTime = Get-Date -Format "yyyyMMdd_HHmmss"
          Write-Host "Emergency backup at `$shutdownTime"
          
          try {
              # Backup nhanh tr∆∞·ªõc khi shutdown
              Compress-Archive -Path "`$env:DATA_DIR\*" -DestinationPath "`$env:BACKUP_DIR\emergency_backup_`$shutdownTime.zip" -Force
              Write-Host "‚úÖ Emergency backup completed"
          } catch {
              Write-Host "‚ö†Ô∏è Emergency backup failed"
          }
"@
          # T·∫°o task cho shutdown
          $shutdownTaskAction = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-Command `"$shutdownScript`""
          $shutdownTrigger = New-ScheduledTaskTrigger -AtStartup
          Register-ScheduledTask -TaskName "RDP_Emergency_Backup" -Action $shutdownTaskAction -Trigger $shutdownTrigger -Description "Emergency backup on shutdown" -Force

      - name: Display Optimized Connection Info with Backup Status
        run: |
          $backupStatus = if (Test-Path "$env:BACKUP_DIR\data_backup.zip") { "‚úÖ ACTIVE" } else { "üîÑ FIRST RUN" }
          
          Write-Host "=========================================="
          Write-Host "üöÄ OPTIMIZED MOBILE RDP WITH BACKUP"
          Write-Host "=========================================="
          Write-Host "IP: $env:TAILSCALE_IP"
          Write-Host "User: $env:RDP_USER"
          Write-Host "Pass: $env:RDP_PASSWORD"
          Write-Host "Backup: $backupStatus"
          Write-Host "Data Dir: $env:DATA_DIR"
          Write-Host ""
          Write-Host "üì± MOBILE SETTINGS FOR BEST PERFORMANCE:"
          Write-Host "1. Turn OFF 'Security Layer'"
          Write-Host "2. Color: 16-bit (High Color)"
          Write-Host "3. Resolution: 1280x720"
          Write-Host "4. Turn OFF 'Persistent bitmap caching'"
          Write-Host "5. Turn ON 'Compression'"
          Write-Host ""
          Write-Host "üíæ BACKUP FEATURES:"
          Write-Host "- Auto-backup every 30 minutes"
          Write-Host "- Emergency backup on shutdown"
          Write-Host "- Manual backup available"
          Write-Host "- Restore option on next run"
          Write-Host "=========================================="

      - name: Monitor Performance with Backup Status
        run: |
          $counter = 0
          while ($true) {
            $counter++
            
            # Ki·ªÉm tra backup status m·ªói 10 ph√∫t
            if ($counter % 10 -eq 0) {
              $backupSize = if (Test-Path "$env:BACKUP_DIR\data_backup.zip") { 
                [math]::Round((Get-Item "$env:BACKUP_DIR\data_backup.zip").Length/1MB, 2)
              } else { 0 }
              
              $dataSize = [math]::Round((Get-ChildItem $env:DATA_DIR -Recurse | Measure-Object -Property Length -Sum).Sum/1MB, 2)
              
              Write-Host "[$(Get-Date -Format 'HH:mm:ss')] Backup Status - Data: ${dataSize}MB | Backup: ${backupSize}MB"
            }
            
            # Ki·ªÉm tra ping m·ªói 5 ph√∫t
            if ($counter % 5 -eq 0) {
              $pingResult = Test-Connection -ComputerName $env:TAILSCALE_IP -Count 3 -Quiet -ErrorAction SilentlyContinue
              Write-Host "[$(Get-Date -Format 'HH:mm:ss')] Performance - Ping: $pingResult - Uptime: $counter min"
            }
            
            Start-Sleep -Seconds 60
          }
