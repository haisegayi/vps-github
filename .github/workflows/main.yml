name: RDP Persistent Pro

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # T·ª± ƒë·ªông ch·∫°y l·∫°i m·ªói 6 gi·ªù

env:
  BACKUP_REPO: "haisegayi/rdp-backup"
  PERSISTENT_USER: "VietnamUser"
  PERSISTENT_PASSWORD: "Vietnam@2024!"

jobs:
  backup-data:
    runs-on: ubuntu-latest
    if: always()  # Lu√¥n ch·∫°y k·ªÉ c·∫£ khi failed
    steps:
      - name: Backup RDP Data
        if: github.event_name != 'schedule'
        run: |
          echo "üì¶ Backup process would run here"
          # Trong th·ª±c t·∫ø, b·∫°n s·∫Ω push data l√™n repo kh√°c
          # ho·∫∑c d√πng cloud storage

  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600
    needs: backup-data

    steps:
      - name: Checkout Backup Data
        run: |
          Write-Host "üîÑ Checking for previous backup..."
          # Trong th·ª±c t·∫ø, b·∫°n s·∫Ω clone backup repo ·ªü ƒë√¢y

      - name: Setup Persistent Environment
        run: |
          Write-Host "üéØ Setting up persistent environment..."
          
          # S·ª≠ d·ª•ng password c·ªë ƒë·ªãnh ƒë·ªÉ d·ªÖ nh·ªõ
          $securePass = ConvertTo-SecureString $env:PERSISTENT_PASSWORD -AsPlainText -Force
          
          # T·∫°o user c·ªë ƒë·ªãnh
          $userExists = Get-LocalUser -Name $env:PERSISTENT_USER -ErrorAction SilentlyContinue
          if (-not $userExists) {
              New-LocalUser -Name $env:PERSISTENT_USER -Password $securePass -AccountNeverExpires
              Add-LocalGroupMember -Group "Administrators" -Member $env:PERSISTENT_USER
              Add-LocalGroupMember -Group "Remote Desktop Users" -Member $env:PERSISTENT_USER
              Write-Host "‚úÖ Created persistent user: $env:PERSISTENT_USER"
          } else {
              Write-Host "‚úÖ Reusing existing user: $env:PERSISTENT_USER"
          }
          
          "RDP_USER=$env:PERSISTENT_USER" | Out-File -FilePath $env:GITHUB_ENV -Append
          "RDP_PASSWORD=$env:PERSISTENT_PASSWORD" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Configure Ultra Optimized RDP
        run: |
          Write-Host "‚ö° Configuring ultra-optimized RDP..."
          
          # RDP Core Settings
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          
          # Extreme Performance Optimization
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxCompressionLevel" -Value 3 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MinEncryptionLevel" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxXResolution" -Value 1366 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxYResolution" -Value 768 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxColorDepth" -Value 16 -Force
          
          # Network Turbo Optimization
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' -Name "Tcp1323Opts" -Value 3 -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' -Name "TCPWindowSize" -Value 65535 -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' -Name "DefaultTTL" -Value 64 -Force
          
          # Firewall
          netsh advfirewall firewall delete rule name="RDP" 2>$null
          netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389
          
          Restart-Service -Name TermService -Force
          Write-Host "‚úÖ RDP ultra-optimized"

      - name: Install Essential Software
        run: |
          Write-Host "üì¶ Installing essential software..."
          
          # T·∫°o desktop shortcuts cho ti·ªán √≠ch
          $desktopPath = [Environment]::GetFolderPath("Desktop")
          $wscriptShell = New-Object -ComObject WScript.Shell
          
          # Shortcut for File Explorer
          $shortcut = $wscriptShell.CreateShortcut("$desktopPath\File Explorer.lnk")
          $shortcut.TargetPath = "explorer.exe"
          $shortcut.Save()
          
          # Shortcut for CMD
          $shortcut = $wscriptShell.CreateShortcut("$desktopPath\Command Prompt.lnk")
          $shortcut.TargetPath = "cmd.exe"
          $shortcut.Save()
          
          Write-Host "‚úÖ Essential shortcuts created"

      - name: Smart Tailscale Setup
        run: |
          Write-Host "üîó Setting up smart Tailscale connection..."
          
          # Ki·ªÉm tra Tailscale ƒë√£ c√†i ch∆∞a
          if (-not (Test-Path "$env:ProgramFiles\Tailscale\tailscale.exe")) {
              Write-Host "üì• Installing Tailscale..."
              $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
              $installerPath = "$env:TEMP\tailscale.msi"
              Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
              Start-Process msiexec.exe -ArgumentList "/i", "$installerPath", "/quiet", "/norestart" -Wait
              Remove-Item $installerPath -Force
              Start-Sleep -Seconds 8
          }
          
          # Hostname c·ªë ƒë·ªãnh ƒë·ªÉ d·ªÖ nh·∫≠n di·ªán
          $hostname = "vietnam-rdp-pro"
          
          Write-Host "üöÄ Starting Tailscale with hostname: $hostname"
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --login-server=https://login.tailscale.com --accept-routes --hostname=$hostname --reset
          
          # Hi·ªÉn th·ªã QR code
          Start-Sleep -Seconds 5
          Write-Host "üîê Scan this QR code or visit: https://login.tailscale.com/admin/machines"
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --qr
          
          # Smart IP waiting v·ªõi timeout
          $tsIP = $null
          $maxAttempts = 30
          for ($i = 1; $i -le $maxAttempts; $i++) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
              if ($tsIP -and $tsIP.StartsWith('100.')) {
                  "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Append
                  Write-Host "‚úÖ Connected! IP: $tsIP"
                  break
              }
              
              if ($i -eq 15) {
                  Write-Host "‚ö†Ô∏è  Taking longer than usual... Please check Tailscale admin panel"
              }
              
              Write-Host "‚è≥ Waiting for IP... ($i/$maxAttempts)"
              Start-Sleep -Seconds 3
          }
          
          if (-not $tsIP) {
              Write-Host "‚ùå No IP received. Please authorize device manually."
              Write-Host "üîó Visit: https://login.tailscale.com/admin/machines"
              Write-Host "üîç Look for: $hostname"
          }

      - name: Performance Boost
        run: |
          Write-Host "üöÄ Applying performance boost..."
          
          # T·∫Øt services kh√¥ng c·∫ßn thi·∫øt
          $services = @("SysMain", "WSearch", "TabletInputService", "Spooler")
          foreach ($service in $services) {
              try {
                  Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
                  Set-Service -Name $service -StartupType Disabled -ErrorAction SilentlyContinue
                  Write-Host "‚úÖ Disabled: $service"
              } catch {
                  Write-Host "‚ö†Ô∏è  Could not disable: $service"
              }
          }
          
          # High performance power plan
          powercfg /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
          
          # Optimize for RDP
          Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Terminal Server Client' -Name "AuthenticationLevel" -Value 0 -Force
          
          Write-Host "‚úÖ Performance boost applied"

      - name: Display Pro Connection Info
        run: |
          Write-Host ""
          Write-Host "=" * 65
          Write-Host "üöÄ RDP PERSISTENT PRO - READY"
          Write-Host "=" * 65
          Write-Host "üåê CONNECTION:"
          Write-Host "   IP: $env:TAILSCALE_IP"
          Write-Host "   User: $env:RDP_USER"
          Write-Host "   Pass: $env:RDP_PASSWORD"
          Write-Host ""
          Write-Host "üîê AUTHENTICATION:"
          Write-Host "   URL: https://login.tailscale.com/admin/machines"
          Write-Host "   Device: vietnam-rdp-pro"
          Write-Host ""
          Write-Host "üì± MOBILE OPTIMIZED SETTINGS:"
          Write-Host "   ‚Ä¢ Security Layer: OFF"
          Write-Host "   ‚Ä¢ Resolution: 1366x768"
          Write_Host "   ‚Ä¢ Color: 16-bit"
          Write-Host "   ‚Ä¢ Compression: ON"
          Write-Host ""
          Write-Host "üí° PERSISTENT FEATURES:"
          Write-Host "   ‚Ä¢ Same credentials every time"
          Write-Host "   ‚Ä¢ Auto-reconnect every 6 hours"
          Write-Host "   ‚Ä¢ Same Tailscale device name"
          Write-Host "=" * 65
          Write-Host ""

      - name: Smart Session Manager
        run: |
          Write-Host "üîß Smart Session Manager Started"
          Write-Host "üí° Next time, use the same credentials!"
          
          $sessionStart = Get-Date
          $lastHealthCheck = Get-Date
          $connectionCount = 0
          
          while ($true) {
              $currentTime = Get-Date
              $sessionDuration = [int](($currentTime - $sessionStart).TotalMinutes)
              
              # Health check every 10 minutes
              if (($currentTime - $lastHealthCheck).TotalMinutes -ge 10) {
                  $lastHealthCheck = $currentTime
                  
                  # Check Tailscale connection
                  $currentIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
                  $status = if ($currentIP) { "‚úÖ CONNECTED" } else { "‚ùå DISCONNECTED" }
                  
                  Write-Host "üè• Health Check - $status - Session: $sessionDuration minutes"
                  
                  if ($currentIP -and $currentIP -ne $env:TAILSCALE_IP) {
                      Write-Host "üîÑ IP Changed: $env:TAILSCALE_IP ‚Üí $currentIP"
                      "TAILSCALE_IP=$currentIP" | Out-File -FilePath $env:GITHUB_ENV -Append
                  }
              }
              
              # Status update every 5 minutes
              if ($sessionDuration % 5 -eq 0) {
                  Write-Host "[$(Get-Date -Format 'HH:mm')] Session Active - $sessionDuration minutes"
                  Write-Host "   üìç $env:TAILSCALE_IP | üë§ $env:RDP_USER"
                  Write-Host "   üí° Next: Use same credentials for quick reconnect"
              }
              
              # Auto-stop after 5 hours 50 minutes (tr∆∞·ªõc timeout)
              if ($sessionDuration -ge 350) {
                  Write-Host "üõë Auto-stopping session before timeout..."
                  break
              }
              
              Start-Sleep -Seconds 60
          }

  auto-restart:
    runs-on: ubuntu-latest
    needs: secure-rdp
    if: always()
    steps:
      - name: Check if Restart Needed
        run: |
          echo "üîÑ This would trigger auto-restart if needed"
          # Trong th·ª±c t·∫ø, b·∫°n s·∫Ω trigger workflow m·ªõi ·ªü ƒë√¢y
