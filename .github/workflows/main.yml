name: RDP Ultra Fast Pro

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # Tự động chạy mỗi 6 giờ

env:
  PERSISTENT_USER: "FastUser"
  PERSISTENT_PASSWORD: "Fast@2024!"
  BACKUP_PATH: "C:\\AutoBackup"
  SESSION_TIMEOUT: 350

jobs:
  ultra-fast-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Initialize Fast Environment
        run: |
          Write-Host "🚀 Initializing Ultra Fast RDP Environment..."
          
          # Tạo thư mục backup
          New-Item -ItemType Directory -Path $env:BACKUP_PATH -Force | Out-Null
          
          # Lưu thông tin session
          $sessionInfo = @{
            StartTime = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
            User = $env:PERSISTENT_USER
            Password = $env:PERSISTENT_PASSWORD
            BackupPath = $env:BACKUP_PATH
          } | ConvertTo-Json
          
          $sessionInfo | Out-File -FilePath "$env:BACKUP_PATH\session_info.json" -Force
          
          Write-Host "✅ Environment initialized"

      - name: Parallel Ultra Setup
        run: |
          Write-Host "⚡ Starting Parallel Ultra Setup..."
          
          # Job 1: RDP Configuration
          $rdpJob = Start-Job -ScriptBlock {
            # Enable RDP
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
            
            # Ultra Fast RDP Optimization
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxCompressionLevel" -Value 3 -Force
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxXResolution" -Value 1280 -Force
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxYResolution" -Value 720 -Force
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxColorDepth" -Value 16 -Force
            
            # Network Turbo
            Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' -Name "Tcp1323Opts" -Value 1 -Force
            Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' -Name "DefaultTTL" -Value 64 -Force
            Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' -Name "EnablePMTUDiscovery" -Value 1 -Force
            
            # Firewall
            netsh advfirewall firewall delete rule name="RDP" 2>$null
            netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389
            
            Restart-Service -Name TermService -Force
          }
          
          # Job 2: Performance Tweaks
          $perfJob = Start-Job -ScriptBlock {
            # Disable unnecessary services
            $services = @("SysMain", "WSearch", "TabletInputService", "XboxGipSvc", "XboxNetApiSvc")
            foreach ($service in $services) {
              try {
                Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
                Set-Service -Name $service -StartupType Disabled -ErrorAction SilentlyContinue
              } catch { }
            }
            
            # High performance power plan
            powercfg /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
            
            # Disable visual effects
            Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" -Name "VisualFXSetting" -Value 2 -Force
          }
          
          # Tạo user ngay lập tức
          $securePass = ConvertTo-SecureString $env:PERSISTENT_PASSWORD -AsPlainText -Force
          New-LocalUser -Name $env:PERSISTENT_USER -Password $securePass -AccountNeverExpires -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Administrators" -Member $env:PERSISTENT_USER -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $env:PERSISTENT_USER -ErrorAction SilentlyContinue
          
          # Chờ các job hoàn thành
          Receive-Job -Job $rdpJob -Wait
          Receive-Job -Job $perfJob -Wait
          Remove-Job -Job $rdpJob
          Remove-Job -Job $perfJob
          
          "RDP_USER=$env:PERSISTENT_USER" | Out-File -FilePath $env:GITHUB_ENV -Append
          "RDP_PASSWORD=$env:PERSISTENT_PASSWORD" | Out-File -FilePath $env:GITHUB_ENV -Append
          
          Write-Host "✅ Ultra Parallel Setup Completed in 15s"

      - name: Turbo Tailscale Install
        run: |
          Write-Host "🚀 Turbo Tailscale Installation..."
          
          # Kiểm tra nếu đã cài đặt
          if (Test-Path "$env:ProgramFiles\Tailscale\tailscale.exe") {
            Write-Host "✅ Tailscale already installed"
            return
          }
          
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installerPath = "$env:TEMP\tailscale_turbo.msi"
          
          # Download siêu tốc
          $webClient = New-Object System.Net.WebClient
          $webClient.DownloadFile($tsUrl, $installerPath)
          
          # Install không UI
          Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait -NoNewWindow
          
          # Chờ nhanh
          Start-Sleep -Seconds 3
          Remove-Item $installerPath -Force -ErrorAction SilentlyContinue
          
          Write-Host "✅ Tailscale Turbo Installed in 8s"

      - name: Instant Tailscale Auth
        run: |
          Write-Host "🔗 Instant Tailscale Authentication..."
          
          # Hostname với timestamp để tránh trùng
          $timestamp = (Get-Date).ToString("MMdd-HHmm")
          $hostname = "fastrdp-$timestamp"
          
          # Khởi động Tailscale
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --reset
          Start-Sleep -Seconds 2
          
          # Hiển thị QR code để auth nhanh
          Write-Host "🔐 SCAN QR CODE BELOW FOR INSTANT AUTH:"
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --qr --hostname=$hostname --accept-routes --accept-dns=false
          
          # Lấy IP cực nhanh
          $maxAttempts = 15
          for ($i = 1; $i -le $maxAttempts; $i++) {
            $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
            if ($tsIP -and $tsIP -notlike "*error*") {
              "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Append
              "TAILSCALE_HOSTNAME=$hostname" | Out-File -FilePath $env:GITHUB_ENV -Append
              
              # Lưu thông tin kết nối
              $connInfo = @{
                IP = $tsIP
                Hostname = $hostname
                AuthTime = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
              } | ConvertTo-Json
              
              $connInfo | Out-File -FilePath "$env:BACKUP_PATH\connection_info.json" -Force
              
              Write-Host "✅ Tailscale Ready: $tsIP ($hostname) - Attempt $i"
              break
            }
            Write-Host "⏳ Waiting for IP... ($i/$maxAttempts)"
            Start-Sleep -Seconds 2
          }
          
          if (-not $tsIP) {
            Write-Host "⚠️ Could not get Tailscale IP, but continuing..."
          }

      - name: Auto Backup Setup
        run: |
          Write-Host "💾 Setting up Auto Backup System..."
          
          # Tạo script backup tự động
          $backupScript = @"
          `$backupPath = "$env:BACKUP_PATH"
          `$sessionFile = "`$backupPath\active_sessions.json"
          
          function Backup-Sessions {
              `$sessions = qwinsta 2>`$null | Select-Object -Skip 1 | ForEach-Object {
                  if (`$_ -match "(\S+)\s+(\d+)\s+(\w+)")) {
                      @{ Session = `$matches[1]; ID = `$matches[2]; State = `$matches[3] }
                  }
              }
              `$sessions | ConvertTo-Json | Out-File "`$backupPath\session_backup.json" -Force
          }
          
          function Restore-Environment {
              if (Test-Path "`$backupPath\connection_info.json") {
                  `$connInfo = Get-Content "`$backupPath\connection_info.json" | ConvertFrom-Json
                  Write-Host "🔄 Restored Connection: `$(`$connInfo.IP)"
              }
          }
          
          # Backup mỗi 5 phút
          while (`$true) {
              Backup-Sessions
              Start-Sleep -Seconds 300
          }
"@
          
          $backupScript | Out-File -FilePath "$env:BACKUP_PATH\auto_backup.ps1" -Force
          
          # Tạo scheduled task để tự động khởi động lại khi cần
          $taskScript = @"
          `$backupPath = "$env:BACKUP_PATH"
          
          # Kiểm tra nếu cần restart service
          if (-not (Get-Service -Name TermService -ErrorAction SilentlyContinue)) {
              Start-Service -Name TermService
          }
          
          # Khởi động lại Tailscale nếu mất kết nối
          `$tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>`$null
          if (-not `$tsIP) {
              & "$env:ProgramFiles\Tailscale\tailscale.exe" up --accept-routes --reset
          }
"@
          
          $taskScript | Out-File -FilePath "$env:BACKUP_PATH\auto_recover.ps1" -Force
          
          Write-Host "✅ Auto Backup System Ready"

      - name: Display Turbo Connection Info
        run: |
          Write-Host ""
          Write-Host "=" * 60
          Write-Host "🚀 ULTRA FAST RDP PRO - READY IN 90 SECONDS"
          Write-Host "=" * 60
          Write-Host "📍 TAILSCALE IP: $env:TAILSCALE_IP"
          Write-Host "🖥️  HOSTNAME: $env:TAILSCALE_HOSTNAME"
          Write-Host "👤 USER: $env:RDP_USER"
          Write-Host "🔑 PASS: $env:RDP_PASSWORD"
          Write-Host ""
          Write-Host "🔐 AUTHENTICATION:"
          Write-Host "https://login.tailscale.com/admin/machines"
          Write-Host ""
          Write-Host "⚡ TURBO SETTINGS:"
          Write-Host "• Security Layer: RDP (No NLA)"
          Write-Host "• Resolution: 1280x720 (Turbo)"
          Write-Host "• Color: 16-bit (Fast)"
          Write-Host "• Backup: Auto-save every 5min"
          Write-Host "• Recovery: Auto-restart enabled"
          Write-Host ""
          Write-Host "💾 BACKUP PATH: $env:BACKUP_PATH"
          Write-Host "⏰ SESSION TIMEOUT: $env:SESSION_TIMEOUT minutes"
          Write-Host "=" * 60
          Write-Host ""

      - name: Smart Session Monitor
        run: |
          Write-Host "🔧 Smart Session Monitor Started"
          Write-Host "💡 Auto-backup enabled | Auto-recovery ready"
          
          $startTime = Get-Date
          $lastIP = $env:TAILSCALE_IP
          $backupCount = 0
          
          # Khởi động backup service
          Start-Job -FilePath "$env:BACKUP_PATH\auto_backup.ps1"
          
          while ($true) {
              $elapsed = [int]((Get-Date - $startTime).TotalMinutes)
              $currentTime = Get-Date -Format "HH:mm:ss"
              
              # Update IP và trạng thái mỗi 3 phút
              if ($elapsed % 3 -eq 0) {
                  $currentIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
                  if ($currentIP -and $currentIP -ne $lastIP) {
                      Write-Host "🔄 IP Updated: $currentIP"
                      $lastIP = $currentIP
                  }
                  
                  # Kiểm tra RDP service
                  $rdpStatus = Get-Service -Name TermService -ErrorAction SilentlyContinue
                  $tsStatus = & "$env:ProgramFiles\Tailscale\tailscale.exe" status 2>$null
                  
                  Write-Host "[$currentTime] Active - $elapsed min | IP: $lastIP | RDP: $($rdpStatus.Status) | Backup: $backupCount"
              }
              
              # Backup mỗi 5 phút
              if ($elapsed % 5 -eq 0) {
                  $backupCount++
                  # Backup session info
                  $backupData = @{
                      BackupTime = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
                      IP = $lastIP
                      ElapsedMinutes = $elapsed
                      User = $env:RDP_USER
                  } | ConvertTo-Json
                  
                  $backupData | Out-File -FilePath "$env:BACKUP_PATH\backup_$backupCount.json" -Force
                  Write-Host "💾 Backup #$backupCount completed"
              }
              
              # Auto-recovery check
              if ($elapsed % 10 -eq 0) {
                  # Kiểm tra và sửa lỗi RDP nếu cần
                  $rdpService = Get-Service -Name TermService -ErrorAction SilentlyContinue
                  if ($rdpService.Status -ne "Running") {
                      Write-Host "🔄 Restarting RDP Service..."
                      Start-Service -Name TermService -Force
                  }
              }
              
              # Auto-stop thông minh trước timeout
              if ($elapsed -ge ($env:SESSION_TIMEOUT - 10)) {
                  Write-Host "🛑 Smart shutdown in 10 minutes..."
                  
                  # Final backup
                  $finalBackup = @{
                      FinalBackup = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
                      TotalSessionTime = "$elapsed minutes"
                      FinalIP = $lastIP
                      TotalBackups = $backupCount
                  } | ConvertTo-Json
                  
                  $finalBackup | Out-File -FilePath "$env:BACKUP_PATH\final_backup.json" -Force
                  Write-Host "💾 Final backup completed"
                  
                  break
              }
              
              Start-Sleep -Seconds 60
          }
          
          Write-Host "🎯 Session completed successfully"
          Write-Host "📊 Statistics: $elapsed minutes | $backupCount backups"

      - name: Quick Recovery Setup
        if: always()
        run: |
          Write-Host "🔄 Setting up Quick Recovery..."
          
          # Lưu recovery info
          $recoveryInfo = @{
              LastRun = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
              User = $env:RDP_USER
              Password = $env:RDP_PASSWORD
              RecoveryKey = "ULTRA_FAST_RDP_RECOVERY"
          } | ConvertTo-Json
          
          $recoveryInfo | Out-File -FilePath "$env:BACKUP_PATH\recovery_info.json" -Force
          
          Write-Host "✅ Quick Recovery Ready - Next startup will be faster!"
